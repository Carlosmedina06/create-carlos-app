{"version":3,"sources":["../node_modules/tsup/assets/cjs_shims.js","../index.ts","../utils/helpers/getArguments.ts","../utils/helpers/getProjectInfo.ts","../utils/constants/templates.ts","../utils/helpers/copyFiles.ts","../utils/helpers/replaceTokens.ts"],"sourcesContent":["// Shim globals in cjs bundle\n// There's a weird bug that esbuild will always inject importMetaUrl\n// if we export it as `const importMetaUrl = ... __filename ...`\n// But using a function will not cause this issue\n\nconst getImportMetaUrl = () =>\n  typeof document === 'undefined'\n    ? new URL('file:' + __filename).href\n    : (document.currentScript && document.currentScript.src) ||\n      new URL('main.js', document.baseURI).href\n\nexport const importMetaUrl = /* @__PURE__ */ getImportMetaUrl()\n","import path from 'node:path'\r\nimport { fileURLToPath } from 'node:url'\r\n\r\nimport color from 'picocolors'\r\n\r\nimport getArguments from './utils/helpers/getArguments'\r\nimport getProjectInfo from './utils/helpers/getProjectInfo'\r\nimport copyFiles from './utils/helpers/copyFiles'\r\nimport replaceTokens from './utils/helpers/replaceTokens'\r\n\r\nasync function main() {\r\n  const args = await getArguments()\r\n  const initialName = args._[0]\r\n  const initialProject = args._[1]\r\n\r\n  const project = await getProjectInfo(initialName, initialProject)\r\n\r\n  if (!project.name || !project.template || !project.template.length) {\r\n    console.log('\\n ðŸš¨ Exiting... ')\r\n    process.exit(1) // eslint-disable-line\r\n  }\r\n\r\n  const template = path.join(\r\n    path.dirname(fileURLToPath(import.meta.url)),\r\n    'templates',\r\n    project.template,\r\n  )\r\n  const destination = path.join(process.cwd(), project.name)\r\n\r\n  await copyFiles(template, destination)\r\n  await replaceTokens(destination, project.name)\r\n\r\n  console.log('\\nâœ¨ Project created âœ¨')\r\n  console.log(`\\n${color.yellow(`Next steps:`)}\\n`)\r\n  console.log(`${color.green(`cd`)} ${project.name}`)\r\n  console.log(`${color.green(`npm`)} install`)\r\n  console.log(`${color.green(`npm`)} dev`)\r\n\r\n  console.log('\\n---\\n')\r\n  console.log(\r\n    `Questions ðŸ‘€? ${color.underline(color.cyan('https://www.linkedin.com/in/carlosmedina06/'))}`,\r\n  )\r\n}\r\n\r\nmain().catch((error) => {\r\n  console.error('\\nðŸš¨ An error occurred: ', error)\r\n  process.exit(1) // eslint-disable-line\r\n})\r\n","import yargs from 'yargs'\r\nimport { hideBin } from 'yargs/helpers'\r\n\r\ninterface Arguments {\r\n  _: string[]\r\n  [key: string]: unknown\r\n}\r\n\r\nasync function getArguments(): Promise<Arguments> {\r\n  const args = await yargs(hideBin(process.argv)).options({\r\n    name: {\r\n      alias: 'n',\r\n      type: 'string',\r\n      description: 'Name of the project',\r\n    },\r\n    template: {\r\n      alias: 't',\r\n      type: 'string',\r\n      description: 'Template to use',\r\n    },\r\n  }).argv\r\n\r\n  const overriddenArgs = { ...args }\r\n\r\n  return overriddenArgs as Arguments\r\n}\r\n\r\nexport default getArguments\r\n","import prompts from 'prompts'\r\n\r\nimport TEMPLATES from '../constants/templates'\r\n\r\nasync function getProjectInfo(initialName: string | undefined, initialProject: string | undefined) {\r\n  return prompts([\r\n    {\r\n      type: 'text',\r\n      name: 'name',\r\n      message: 'What is the name of your project?',\r\n      initial: initialName || 'medina-project-name',\r\n      validate: (value: string) => {\r\n        if (value.match(/[^a-zA-Z0-9-_]+/g))\r\n          return 'Project name can only contain letters, numbers, dashes and underscores'\r\n\r\n        return true\r\n      },\r\n    },\r\n    {\r\n      type: 'select',\r\n      name: 'template',\r\n      message: `Which template would you like to use?`,\r\n      initial: initialProject || 0,\r\n      choices: TEMPLATES,\r\n    },\r\n  ])\r\n}\r\n\r\nexport default getProjectInfo\r\n","const TEMPLATES = [\r\n  {\r\n    title: 'React (vite) + ESLint + TypeScript + Tailwind',\r\n    value: 'react-eslint-ts-tw',\r\n  },\r\n  {\r\n    title: 'Next.js + ESLint + TypeScript + Tailwind',\r\n    value: 'next-eslint-ts-tw',\r\n  },\r\n  {\r\n    title: 'Node.js + Expres + ESLint + TypeScript',\r\n    value: 'node-express-eslint-ts',\r\n  },\r\n  {\r\n    title: 'Node.js + Expres + ESLint + TypeScript + Sequelize',\r\n    value: 'node-express-eslint-ts-sequelize',\r\n  },\r\n  {\r\n    title: 'Node.js + Nest.js + GraphQL + ESLint + TypeScript + Sequelize',\r\n    value: 'node-nest-graphql-ts-sequelize',\r\n  },\r\n]\r\n\r\nexport default TEMPLATES\r\n","import { cp } from 'node:fs/promises'\r\nimport path from 'node:path'\r\n\r\nasync function copyFiles(template: string, destination: string) {\r\n  await cp(path.join(template, 'project'), destination, { recursive: true })\r\n}\r\n\r\nexport default copyFiles\r\n","import { readFile, writeFile } from 'node:fs/promises'\r\n\r\nimport { glob } from 'glob'\r\nasync function replaceTokens(destination: string, projectName: string) {\r\n  const files = await glob(`**/*`, { nodir: true, cwd: destination, absolute: true })\r\n\r\n  for await (const file of files) {\r\n    const data = await readFile(file, 'utf8')\r\n    const draft = data.replace(/{{name}}/g, projectName)\r\n\r\n    await writeFile(file, draft, 'utf8')\r\n  }\r\n}\r\n\r\nexport default replaceTokens\r\n"],"mappings":"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","names":["import_node_path","yargs","prompts","path","import_promises","path","color"]}