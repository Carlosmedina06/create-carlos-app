{"version":3,"sources":["../node_modules/tsup/assets/cjs_shims.js","../index.ts","../utils/helpers/getArguments.ts","../utils/helpers/getProjectInfo.ts","../utils/constants/templates.ts","../utils/helpers/copyFiles.ts","../utils/helpers/replaceTokens.ts"],"sourcesContent":["// Shim globals in cjs bundle\n// There's a weird bug that esbuild will always inject importMetaUrl\n// if we export it as `const importMetaUrl = ... __filename ...`\n// But using a function will not cause this issue\n\nconst getImportMetaUrl = () =>\n  typeof document === 'undefined'\n    ? new URL('file:' + __filename).href\n    : (document.currentScript && document.currentScript.src) ||\n      new URL('main.js', document.baseURI).href\n\nexport const importMetaUrl = /* @__PURE__ */ getImportMetaUrl()\n","import path from 'node:path'\nimport { fileURLToPath } from 'node:url'\n\nimport color from 'picocolors'\n\nimport getArguments from './utils/helpers/getArguments'\nimport getProjectInfo from './utils/helpers/getProjectInfo'\nimport copyFiles from './utils/helpers/copyFiles'\nimport replaceTokens from './utils/helpers/replaceTokens'\n\nasync function main() {\n  const args = await getArguments()\n  const initialName = args._[0]\n  const initialProject = args._[1]\n\n  const project = await getProjectInfo(initialName, initialProject)\n\n  if (!project.name || !project.template || !project.template.length) {\n    console.log('\\n ðŸš¨ Exiting... ')\n    process.exit(1) // eslint-disable-line\n  }\n\n  const template = path.join(\n    path.dirname(fileURLToPath(import.meta.url)),\n    'templates',\n    project.template,\n  )\n  const destination = path.join(process.cwd(), project.name)\n\n  await copyFiles(template, destination)\n  await replaceTokens(destination, project.name)\n\n  console.log('\\nâœ¨ Project created âœ¨')\n  console.log(`\\n${color.yellow(`Next steps:`)}\\n`)\n  console.log(`${color.green(`cd`)} ${project.name}`)\n  console.log(`${color.green(`npm`)} install`)\n  console.log(`${color.green(`npm`)} dev`)\n\n  console.log('\\n---\\n')\n  console.log(\n    `Questions ðŸ‘€? ${color.underline(color.cyan('https://www.linkedin.com/in/carlosmedina06/'))}`,\n  )\n}\n\nmain().catch((error) => {\n  console.error('\\nðŸš¨ An error occurred: ', error)\n  process.exit(1) // eslint-disable-line\n})\n","import yargs from 'yargs'\nimport { hideBin } from 'yargs/helpers'\n\ninterface Arguments {\n  _: string[]\n  [key: string]: unknown\n}\n\nasync function getArguments(): Promise<Arguments> {\n  const args = await yargs(hideBin(process.argv)).options({\n    name: {\n      alias: 'n',\n      type: 'string',\n      description: 'Name of the project',\n    },\n    template: {\n      alias: 't',\n      type: 'string',\n      description: 'Template to use',\n    },\n  }).argv\n\n  const overriddenArgs = { ...args }\n\n  return overriddenArgs as Arguments\n}\n\nexport default getArguments\n","import prompts from 'prompts'\n\nimport TEMPLATES from '../constants/templates'\n\nasync function getProjectInfo(initialName: string | undefined, initialProject: string | undefined) {\n  return prompts([\n    {\n      type: 'text',\n      name: 'name',\n      message: 'What is the name of your project?',\n      initial: initialName || 'medina-project-name',\n      validate: (value: string) => {\n        if (value.match(/[^a-zA-Z0-9-_]+/g))\n          return 'Project name can only contain letters, numbers, dashes and underscores'\n\n        return true\n      },\n    },\n    {\n      type: 'select',\n      name: 'template',\n      message: `Which template would you like to use?`,\n      initial: initialProject || 0,\n      choices: TEMPLATES,\n    },\n  ])\n}\n\nexport default getProjectInfo\n","const TEMPLATES = [\n  {\n    title: 'React (vite) + ESLint + TypeScript + Tailwind',\n    value: 'react-eslint-ts-tw',\n  },\n  {\n    title: 'Next.js + ESLint + TypeScript + Tailwind',\n    value: 'next-eslint-ts-tw',\n  },\n  {\n    title: 'Next.js + ApolloGraphQL + ESLint + TypeScript + Tailwind',\n    value: 'next-graphql-eslint-ts-tw',\n  },\n  {\n    title: 'Node.js + Expres + ESLint + TypeScript',\n    value: 'node-express-eslint-ts',\n  },\n  {\n    title: 'Node.js + Expres + ESLint + TypeScript + Sequelize',\n    value: 'node-express-eslint-ts-sequelize',\n  },\n  {\n    title: 'Node.js + Nest.js + GraphQL + ESLint + TypeScript + Sequelize',\n    value: 'node-nest-graphql-ts-sequelize',\n  },\n]\n\nexport default TEMPLATES\n","import { cp } from 'node:fs/promises'\nimport path from 'node:path'\n\nasync function copyFiles(template: string, destination: string) {\n  await cp(path.join(template, 'project'), destination, { recursive: true })\n}\n\nexport default copyFiles\n","import { readFile, writeFile } from 'node:fs/promises'\n\nimport { glob } from 'glob'\nasync function replaceTokens(destination: string, projectName: string) {\n  const files = await glob(`**/*`, { nodir: true, cwd: destination, absolute: true })\n\n  for await (const file of files) {\n    const data = await readFile(file, 'utf8')\n    const draft = data.replace(/{{name}}/g, projectName)\n\n    await writeFile(file, draft, 'utf8')\n  }\n}\n\nexport default replaceTokens\n"],"mappings":"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","names":["import_node_path","yargs","prompts","path","import_promises","path","color"]}